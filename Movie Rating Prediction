# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder 

# Load your movie dataset (replace 'movie_data.csv' with your dataset file path)
data = pd.read_csv('movies_data.csv',encoding='latin-1')

# Explore the first few rows of the dataset
print(data.head())
print(data.info())
print(data.describe())

# Preprocess the data and perform feature engineering as needed
# Define your features (X) and target variable (y)
y = data['Rating'].fillna(data['Rating'].median(),inplace =True)
data['Genre'].fillna('Unknown', inplace=True)
data['Director'].fillna('Unknown', inplace=True)
data['Actor 1'].fillna('Unknown', inplace=True)
data['Actor 2'].fillna('Unknown', inplace=True)
data['Actor 3'].fillna('Unknown', inplace=True)

# Create LabelEncoder objects
label_encoder_genre = LabelEncoder()
label_encoder_director = LabelEncoder()
label_encoder_actor1 = LabelEncoder()
label_encoder_actor2 = LabelEncoder()
label_encoder_actor3 = LabelEncoder()

# Fit and transform the categorical columns
data['Genre'] = label_encoder_genre.fit_transform(data['Genre'])
data['Director'] = label_encoder_director.fit_transform(data['Director'])
data['Actor 1'] = label_encoder_actor1.fit_transform(data['Actor 1'])
data['Actor 2'] = label_encoder_actor2.fit_transform(data['Actor 2'])
data['Actor 3'] = label_encoder_actor3.fit_transform(data['Actor 3'])

# Split the data into training and testing sets
X = data[['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3']]
y = data['Rating']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=40)

# Create a Linear Regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model's performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse}')
print(f'R-squared (R2) Score: {r2}')

# Example: Plot actual vs. predicted ratings
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Ratings")
plt.ylabel("Predicted Ratings")
plt.title("Actual vs. Predicted Ratings")
plt.show()
